//! SQL file builder with dependency management

use anyhow::{Context, Result};
use std::fs;

pub struct Builder {
    header: String,
    files: Vec<String>,
}

impl Builder {
    pub fn new(title: &str) -> Self {
        Self {
            header: format!("-- {}\n-- Generated by eql-build\n\n", title),
            files: Vec::new(),
        }
    }

    pub fn add_sql_file(&mut self, path: &str) -> Result<()> {
        let sql = fs::read_to_string(path)
            .with_context(|| format!("Failed to read SQL file: {}", path))?;

        // Remove REQUIRE comments (they're metadata for old build system)
        let cleaned = sql
            .lines()
            .filter(|line| !line.trim_start().starts_with("-- REQUIRE:"))
            .collect::<Vec<_>>()
            .join("\n");

        self.files.push(cleaned);
        Ok(())
    }

    pub fn build(self) -> String {
        let mut output = self.header;

        for (i, file) in self.files.iter().enumerate() {
            if i > 0 {
                output.push_str("\n\n");
            }
            output.push_str(file);
        }

        output
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_builder_basic() {
        let builder = Builder::new("Test");
        let output = builder.build();
        assert!(output.contains("Test"));
        assert!(output.contains("Generated by eql-build"));
    }
}
